spring:
  profiles:
    group: # Run - Edit Configurations - Active Profiles에서 설정
      dev: common, dev
      prod: common, prod
---
spring:
  servlet:
    multipart:
      max-request-size: 100MB
      max-file-size: 100MB
  config:
    activate:
      on-profile: "common"
  application:
    name: demo
  sql:
    init:
      platform: mysql
  datasource:
    url: jdbc:mysql://52.78.26.174:3306/2024_Server?useSSL=false&setTimezone=Asia/Seoul&useUnicode=true&characterEncoding=UTF-8
    username: root # username
    password: 52575167 # password
    driver-class-name: com.mysql.cj.jdbc.Driver # mysql 8버전
    #driver-class-name: com.mysql.jdbc.Driver # mysql 5버전
  OAuth2:
    google:
      url: https://accounts.google.com/o/oauth2/v2/auth
      client-id: # client-id
      client-secret:  # client-secret
      callback-login-url: http://localhost:9000/app/users/auth/google/login/callback # 등록한 정보에 맞게 수정해주세요
      scope: https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile # 등록한 정보에 맞게 수정해주세요
    kakao:
      url: https://kauth.kakao.com/oauth/authorize
      client-id: ${KAKAO_CLIENT_ID} # client-id
      callback-login-url: http://localhost:9000/app/users/auth/kakao/login/callback # 등록한 정보에 맞게 수정해주세요
   #   scope: profile, account_email # 등록한 정보에 맞게 수정해주세요



spring.sql.init.platform: mysql
server:
  port: 9000

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    groups-order: DESC
    operationsSorter: method
    disable-swagger-default-url: true
    display-request-duration: true
  api-docs:
    path: /api-docs
  show-actuator: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /**

firebase:
  database-url: ${FIREBASE_DATABASE_URL} # firebase database url

jwt:
  secret-key: ${JWT_SECRET}
imp:
  code: ${IAP_CODE} # 아임포트 코드
  api-key: ${IAP_API_KEY} # 아임포트 API 키
  secret-key: ${IAP_SECRET_KEY} # 아임포트 시크릿 키
---
spring:
  config:
    activate:
      on-profile: "prod"
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
      # create, update, create-drop, none 등의 옵션이 있습니다.
      # create: 기존테이블 삭제 후 다시 생성
      # update: 변경된 부분만 반영
      # create-drop: create와 같으나 종료 시점에 테이블 DROP
      # none: 사용하지 않음
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    # DDl 생성 시 데이터베이스 고유의 기능 사용여부
    generate-ddl: false
    # 실행되는 쿼리문 보여주기 여부
    show-sql: false
    properties:
      hibernate:
        format_sql: false

---
ssh:
  remote_jump_host: ${JUMP_HOST} # 원격서버에 접속할 점프서버
  ssh_port: ${SSH_PORT}    # ssh 프로토콜 포트
  user: ubuntu            # ssh 연결할 사용자 계정
  private_key: ${PRIVATE_KEY}     # ssh 연결 시 사용할 개인키 파일 경로
  database_port: ${DATABASE_PORT}    # 원격서버에 있는 db 포트
  passphrase: ${PASSPHRASE}    # 개인키 암호화 키

spring:
  config:
    activate:
      on-profile: "dev"
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    generate-ddl: false
    show-sql: true
    properties:
      hibernate:
        format_sql: true

